In Spring AOP advice examples, the entire methods of a class are intercepted automatically. 
But for most cases, you may just need a way to intercept only one or two methods, 
this is what ‘Pointcut’ come for. It allow you to intercept a method by it’s method name. +
In addition, a ‘Pointcut’ must be associated with an ‘Advisor’.

In Spring AOP, comes with three very technical terms – Advices, Pointcut , Advisor, 
put it in unofficial way…

    Advice – Indicate the action to take either before or after the method execution.
    Pointcut – Indicate which method should be intercept, by method name or regular expression pattern.
    Advisor – Group ‘Advice’ and ‘Pointcut’ into a single unit, and pass it to a proxy factory object.


1. Pointcuts – Name match example
================================    

Spring comes with PointcutAdvisor class to save your work to declare advisor and pointcut into 
different beans, you can use NameMatchMethodPointcutAdvisor to combine both into a single bean.

	<bean id="customerAdvisor"
		class="org.springframework.aop.support.NameMatchMethodPointcutAdvisor">
 
		<property name="mappedName" value="printName" />
		<property name="advice" ref="hijackAroundMethodBeanAdvice" />
 
	</bean>
	
2. Pointcut – Regular expression example
========================================

You can also match the method’s name by using regular expression pointcut – RegexpMethodPointcutAdvisor.

	<bean id="customerAdvisor"
		class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
		<property name="patterns">
			<list>
				<value>.*URL.*</value>
			</list>
		</property>
 
		<property name="advice" ref="hijackAroundMethodBeanAdvice" />
	</bean>

Now, it intercepts the method which has words ‘URL’ within the method name. 
In practice, you can use it to manage DAO layer, where you can declare “.*DAO.*” to intercept all your DAO 
classes to support transaction


Spring AOP Interceptor transaction is not working
=================================================

Problem
-------
The Spring AOP transaction is not working in following interceptors?

 <bean id="testAutoProxyCreator"
    class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
	<property name="interceptorNames">
		<list>
			<idref bean="urlInterceptorInsert" />
			<idref bean="urlInterceptorCommit" />
			<idref bean="urlInterceptorRelease" />
			<idref bean="matchGenericTxInterceptor" />
		</list>
	</property>
	<property name="beanNames">
		<list>
			<idref local="urlBo" />
		</list>
	</property>
</bean>

The “matchGenericTxInterceptor” transaction interceptor, suppose to intercept urlInterceptorInsert, urlInterceptorCommit,urlInterceptorRelease, but it’s not work as expected?

Solution
---------

The 3 interceptors are executed before transaction manager interceptor (matchGenericTxInterceptor).

To fix it, you have to change the sequence of the interceptor xml file like following (put matchGenericTxInterceptor on top).

 <bean id="testAutoProxyCreator"
        class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
	<property name="interceptorNames">
		<list>
            <idref bean="matchGenericTxInterceptor" />
			<idref bean="urlInterceptorInsert" />
			<idref bean="urlInterceptorCommit" />
			<idref bean="urlInterceptorRelease" />
		</list>
	</property>
	<property name="beanNames">
		<list>
			<idref local="urlBo" />
		</list>
	</property>
</bean>

Note
The sequence of Spring AOP interceptors do affect the functionality.
