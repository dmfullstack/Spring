Dispatcher Servlet
===================
The Dispatcher Servlet as represented by org.springframework.web.servlet. DispatcherServlet, follows the Front Controller Design Pattern for handling Client Requests. It means that whatever Url comes from the Client, this Servlet will intercept the Client Request before passing the Request Object to the Controller. The Web Configuration file should be given definition in such a way that this Dispatcher Servlet should be invoked for Client Requests.

Following is the definition given in the web.xml to invoke Spring’s Dispatcher Servlet.

web.xml
1	<?xml version="1.0" encoding="UTF-8"?>
2	    <web-app version="2.4">
3	 
4	    <servlet>
5	        <servlet-name>dispatcher</servlet-name>
6	        <servlet-class>
7	            org.springframework.web.servlet.DispatcherServlet
8	        </servlet-class>
9	        <load-on-startup>2</load-on-startup>
10	    </servlet>
11	 
12	    <servlet-mapping>
13	        <servlet-name>dispatcher</servlet-name>
14	        <url-pattern>*.*</url-pattern>
15	    </servlet-mapping>
16	 
17	</web-app>

Look into the definition of servlet-mapping tag. It tells that whatever be the Client Request (represented by *.* meaning any Url with any extension), invoke the Servlet by name 'dispatcher'. In our case, the ‘dispatcher’ servlet is nothing but an instance of type 'org.springframework.web.servlet.DispatcherServlet'.

Closing associated term with the Dispatcher Servlet is the Application Context. An Application Context usually represents a set of Configuration Files that are used to provide Configuration Information to the Application. The Application Context is a Xml file that contain various Bean Definitions. By default the Dispatcher Servlet will try to look for a file by name <servlet-name>-servlet.xml in the WEB-INF directory. So, in our case the Servlet will look for a file name called dispatcher-servlet.xml file in the WEB-INF directory.

It is wise sometimes to split all the Configuration information across multiple Configuration Files. In such a case we have to depend on a Listener Servlet called Context Loader represented by org.springframework.web.context.ContextLoaderListener.
1	<web-app>
2	 
3	    <listener>
4	        <listener-class>
5	            org.springframework.web.context.ContextLoaderListener
6	        </listener-class>
7	    </listener>
8	 
9	</web-app>

By default, this Context Listener will try to look for the Configuration File by name
'applicationContext.xml' in the '/WEB-INF' directory. But with the help of the parameter 'contextConfigLocation' the default location can be overridden. Even multiple Configuration Files each containing separate piece of Information is also possible.

web.xml
1	<?xml version="1.0" encoding="UTF-8"?>
2	<web-app version="2.4">
3	 
4	    <listener>
5	        <listener-class>
6	            org.springframework.web.context.ContextLoaderListener
7	        </listener-class>
8	    </listener>
9	 
10	    <context-param>
11	        <param-name>contextConfigLocation</param-name>
12	        <param-value>/WEB-INF/contacts.xml, /WEB-INF/resources.xml</param-value>
13	    </context-param>
14	 
15	</web-app>

The above definition instructs the Framework to look and load for the Configuration Files by name 'contacts.xml' and 'resources.xml' in the WEB-INF directory.
- See more at: http://www.javabeat.net/2007/06/introduction-to-spring-mvc-web-framework-web-tier/#sthash.KQZsnbDs.dpuf