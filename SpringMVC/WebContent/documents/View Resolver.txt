View Resolver
=============

In the previous section, we talked about Logical View and the Physical View Location for the Logical View. The mapping between the Logical name and the Physical View Location is taken care by the View Resolver object. Without any surprise, Spring comes with a set of Built-In Spring Resolvers. It is even possible to write Custom View Resolvers by implementing the org.springframework.web.servlet.ViewResolver interface. Following are the available View Resolvers in the Spring Distribution.

    BeanNameViewResolver
    FreeMarkerViewResolver
    InternalResourceViewResolver
    JasperReportsViewResolver
    ResourceBundleViewResolver
    UrlBasedViewResolver
    VelocityLayoutViewResolver
    VelocityViewResolver
    XmlViewResolver
    XsltViewResolver

The following section concentrates only on 
Internal Resource View Resolver 
Bean Name View Resolver in detail.


Internal Resource View Resolver
-------------------------------
The Internal Resource View Resolver will try to map the Logical name of the 
Resource as returned by the Controller object in the form of 
ModelAndView object to the Physical View location. 

For example, consider the following class definition which returns different 
ModelAndView objects.

MyController.java

public class MyController {

    public ModelAndView handle(){
        if(condition1()){
            return new ModelAndView("myView1");
        }else if (condition2()){
            return new ModelAndView("myView2");
        }
        return new ModelAndView("myView3");
    }
}

Assume that if the Client Request satisfies condition1(), then the view myView.jsp 
which is present in the /WEB-INF folder should be displayed and 
for the client Requests satisfying condition2() and the other one, 
myView2.jsp and myView3.jsp should be displayed.

For this to happen, the following entry must be made in the Configuration File,

<bean id="viewResolver" class="org.springframework.web.servlet.view.
InternalResourceViewResolver">

    <property name="prefix"><value>/WEB-INF/</value></property>
    <property name="suffix"><value>.jsp</value></property>

</bean>


Bean Name View Resolver
-----------------------
One of the dis-advantage of using Internal Resource View Resolver is that the 
name of the View file (whether it is a Jsp File or the Pdf File) must be 
present in the Web Application Context. 
Dynamically generated View files may not be possible. 
In such a case, we may use the Bean Name View Resolver which will dynamically 
generate View in Pdf or Excel Formats.

For the example, if the ModelAndView object represents a View by name “pdf” as shown in the following snippet,

	return ModelAndView("pdf")

And, if we want to generate the Pdf file, then we should have defined the Configuration information in the file as follows,

	<bean id="beanNameResolver"
	class="org.springframework.web.servlet.view.BeanNameViewResolver"/>

The above code configures the Framework to use BeanNameViewResolver. Since the logical name ‘pdf’ must resolve to a Bean Name, we should define a similar entry like the following in the Configuration File. Note that, in the following MyPdfGenerator may be the sub-class of org.springframework.web.servlet.view.document.AbstractPdfView for generating the Pdf File.

	<bean id = " pdf " class = "MyPdfGenerator"/>


