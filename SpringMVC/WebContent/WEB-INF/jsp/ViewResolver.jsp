<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<pre>
<b>View resolvers</b>
<i>AbstractCachingViewResolver:</i>
Abstract view resolver that caches views. Often views need preparation before they can be used; extending this view resolver provides caching.
<i>XmlViewResolver:</i>
Implementation of ViewResolver that accepts a configuration file written in XML with the same DTD as Spring's XML bean factories. The default configuration file is /WEB-INF/views.xml.
<i>ResourceBundleViewResolver:</i>
Implementation of ViewResolver that uses bean definitions in a ResourceBundle, specified by the bundle base name. Typically you define the bundle in a properties file, located in the classpath. The default file name is views.properties.
<i>UrlBasedViewResolver:</i>
Simple implementation of the ViewResolver interface that effects the direct resolution of symbolic view names to URLs, without an explicit mapping definition. This is appropriate if your symbolic names match the names of your view resources in a straightforward manner, without the need for arbitrary mappings.
<i>InternalResourceViewResolver:</i>
Convenience subclass of UrlBasedViewResolver that supports InternalResourceView (in effect, Servlets and JSPs), and subclasses such as JstlView and TilesView. You can specify the view class for all views generated by this resolver by using setViewClass(..). See the Javadocs for the UrlBasedViewResolver class for details.
<i>VelocityViewResolver / FreeMarkerViewResolver:</i>
Convenience subclass of UrlBasedViewResolver that supports VelocityView (in effect, Velocity templates) or FreeMarkerView ,respectively, and custom subclasses of them.
<i>ContentNegotiatingViewResolver:</i>
Implementation of the ViewResolver interface that resolves a view based on the request file name or Accept header. See Section 15.5.4, "ContentNegotiatingViewResolver".

As an example, with JSP as a view technology, you can use the UrlBasedViewResolver. This view resolver translates a view name to a URL and hands the request over to the RequestDispatcher to render the view.

&lt;bean id="viewResolver"
      class="org.springframework.web.servlet.view.UrlBasedViewResolver"&gt;
    &lt;property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/&gt;
    &lt;property name="prefix" value="/WEB-INF/jsp/"/&gt;
    &lt;property name="suffix" value=".jsp"/&gt;
&lt;/bean&gt;


When returning test as a viewname, this view resolver forwards the request to the RequestDispatcher that will send the request to /WEB-INF/jsp/test.jsp.

When you combine different view technologies in a web application, you can use the ResourceBundleViewResolver:

&lt;bean id="viewResolver"
      class="org.springframework.web.servlet.view.ResourceBundleViewResolver"&gt;
    &lt;property name="basename" value="views"/&gt;
    &lt;property name="defaultParentView" value="parentView"/&gt;
&lt;/bean&gt;

or

&lt;bean class="org.springframework.web.servlet.view.ResourceBundleViewResolver"&gt;
		&lt;property name="basename" value="spring-views" /&gt;
	&lt;/bean&gt;
	
	File : spring-views.properties

	WelcomePage.(class)=org.springframework.web.servlet.view.JstlView
	WelcomePage.url=/WEB-INF/pages/WelcomePage.jsp

&lt;bean class="org.springframework.web.servlet.view.XmlViewResolver"&gt;
	   &lt;property name="location"&gt;
		&lt;value&gt;/WEB-INF/spring-views.xml&lt;/value&gt;
	   &lt;/property&gt;
&lt;/bean&gt;

File : spring-views.xml

&lt;beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"&gt;
 
	&lt;bean id="WelcomePage"
		class="org.springframework.web.servlet.view.JstlView"&gt;
		&lt;property name="url" value="/WEB-INF/pages/WelcomePage.jsp" /&gt;
	&lt;/bean&gt;
 
&lt;/beans>


&lt;bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
  &lt;property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/&gt;
  &lt;property name="prefix" value="/WEB-INF/jsp/"/&gt;
  &lt;property name="suffix" value=".jsp"/&gt;
&lt;/bean&gt;
	
	
	


</pre>
</body>
</html>