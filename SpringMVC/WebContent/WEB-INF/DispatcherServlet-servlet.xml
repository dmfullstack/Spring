<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:jee="http://www.springframework.org/schema/jee"
    xmlns:lang="http://www.springframework.org/schema/lang"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:jaxws="http://cxf.apache.org/jaxws"
    xmlns:jaxrs="http://cxf.apache.org/jaxrs"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
 	http://www.springframework.org/schema/context
 	http://www.springframework.org/schema/context/spring-context-3.0.xsd
 	http://www.springframework.org/schema/mvc
 	http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
 	http://www.springframework.org/schema/aop 
 	http://www.springframework.org/schema/aop/spring-aop.xsd
 	http://www.springframework.org/schema/jee 
 	http://www.springframework.org/schema/jee/spring-jee.xsd
	http://www.springframework.org/schema/lang 
	http://www.springframework.org/schema/lang/spring-lang.xsd
 	http://www.springframework.org/schema/tx 
 	http://www.springframework.org/schema/tx/spring-tx.xsd
 	http://www.springframework.org/schema/util 
 	http://www.springframework.org/schema/util/spring-util.xsd
 	http://cxf.apache.org/jaxrs
	http://cxf.apache.org/schemas/jaxrs.xsd
	http://cxf.apache.org/jaxws
	http://cxf.apache.org/schemas/jaxws.xsd">
 	
 	<context:component-scan  base-package="com.helpezee.controller,com.helpezee.beans,com.helpezee.service,com.helpezee.dao,com.helpezee.validators,com.helpezee.ws.apachecxf" />
 	<context:annotation-config />
 	 <tx:annotation-driven />
    
 
 <bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <property name="order" value="1"/>
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
        <property name="prefix" value="/WEB-INF/jsp/" />
        <property name="suffix" value=".jsp" />
    </bean>
    
    <bean name="viewresolve" class="org.springframework.web.servlet.mvc.ParameterizableViewController" >
    <property name="viewName" value="viewResolverpath"/>
    </bean>
    
     <bean name="formHandlingOverview" class="org.springframework.web.servlet.mvc.ParameterizableViewController">
    <property name="viewName" value="formhandle"/>
    </bean>
    
	    <bean name="beancreation" class="org.springframework.web.servlet.mvc.ParameterizableViewController">
	    <property name="viewName" value="beanusingfactorymethod"/>
	    </bean>
   
      <bean name="AutowiringControl" class="org.springframework.web.servlet.mvc.ParameterizableViewController">
	    <property name="viewName" value="AutowiringView"/>
	    </bean>
	    
	      <bean name="AnnotationAutowiringControl" class="org.springframework.web.servlet.mvc.ParameterizableViewController">
	    <property name="viewName" value="AnnotationAutowiringControlView"/>
	    </bean>
	    
	    <bean name="FilterAutoScanningControl" class="org.springframework.web.servlet.mvc.ParameterizableViewController">
	    <property name="viewName" value="FilterAutoScanningControlView"/>
	    </bean>
	    
	    <bean name="parameterizableviewController" class="org.springframework.web.servlet.mvc.ParameterizableViewController">
	    <property name="viewName" value="ParameterizableView123"/>
	    </bean>
	    
	     <bean name="urlfilenameController" class="org.springframework.web.servlet.mvc.ParameterizableViewController">
	    <property name="viewName" value="urlfilenameController123"/>
	    </bean>
	    
	    <bean name="ContollerAbstractCommand" class="org.springframework.web.servlet.mvc.ParameterizableViewController">
	    <property name="viewName" value="absCommandCon"/>
	    </bean>
	       
      <bean name="AbstractController1" class="com.helpezee.controller.ABSController">
      <!--<property name="employee" ref="employee"/>
      <property name="employeeDAO" ref="employeeDAO"/>
      --></bean>
      
      <bean id="employee" class="com.helpezee.beans.Employee"/>
      <bean id="employeeDAO" class="com.helpezee.dao.EmployeeDAOImpl"/>
	    	    
   <!-- ############################Tiles Start############################## -->
    
    <bean class="org.springframework.web.servlet.view.UrlBasedViewResolver">
    <property name="order" value="0"/>
    <property name="viewClass">
        <value>
            org.springframework.web.servlet.view.tiles2.TilesView
        </value>
    </property>
</bean>
<bean id="tilesConfigurer"  class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
    <property name="definitions">
        <list>
            <value>/WEB-INF/tiles.xml</value>
        </list>
    </property>
</bean>
<!-- Tiles End -->

<!-- ##########################AbstractWizardFormController################## -->
 <bean   class="org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping" >
 <property name="order" value="1"/>
 </bean>
 
	<bean class="com.helpezee.controller.UserController" >
    	   <property name="pages">
		<list>
		<!-- follow sequence -->
		<value>Page1Form</value> <!-- page1, _target0 -->
		<value>Page2Form</value> <!-- page2, _target1 -->
		<value>Page3Form</value> <!-- page3, _target2 -->
		</list>
	   </property>
	   <property name="validator">
		<bean class="com.helpezee.validators.UserValidator" />
	   </property>
       </bean>
       
<!-- End -->
<!-- ##############SimpleFormController #######################-->
<bean id="userService" class="com.helpezee.dao.UserServiceImpl" />
<bean  class="com.helpezee.controller.SimpleHandlerController" >
<property name="userService" ref="userService"/>
<property name="formView" value="userForm1"/>
<property name="successView" value="userSuccess"/>
</bean> 
<!-- End -->

<!-- MultiActionController -->
  <bean id="MultiProcessorController" class="com.helpezee.controller.MultiProcessorController">
          <property name="methodNameResolver">
            <bean class="org.springframework.web.servlet.mvc.multiaction.InternalPathMethodNameResolver"/>
   		</property>
<!-- Two ways for routing the request a)InternalPathMethodNameResolver b)PropertiesMethodNameResolver c)ParameterMethodNameResolver 	
   a)
		<property name="methodNameResolver">
            <bean class="org.springframework.web.servlet.mvc.multiaction.InternalPathMethodNameResolver">
    				 <property name="prefix" value="test" />
   		   			 <property name="prefix" value="multiaction" />
	   		</bean>
	   		</property>
	b)   	
	<property name="methodNameResolver">
    	<bean class="org.springframework.web.servlet.mvc.multiaction.PropertiesMethodNameResolver">
     		 <property name="mappings">
				<props>
					   <prop key="/customer/a.htm">add</prop>
					   <prop key="/customer/b.htm">update</prop>
					   <prop key="/customer/c.htm">delete</prop>
					   <prop key="/customer/d.htm">list</prop>
					   <prop key="/customer/whatever.htm">add</prop>
				</props>
       		</property>
     </bean>
    </property>
    
    c)
    <property name="methodNameResolver">
			<bean class="org.springframework.web.servlet.mvc.multiaction.ParameterMethodNameResolver">
			   		<property name="paramName" value="action"/>
			</bean>
     </property>
     /customer/*.htm?action=add –> add() method
	/customer/whatever.htm?action=add –> add() method
    	
    -->
        
    </bean> 

<!-- SimpleURLHandlerMapping -->
    <bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
     <property name="order" value="2"/>
    <property name="mappings">
    <value>
    simpleurlhandlermapping.html = processApplicationFormController
    *.html = MultiProcessorController
    viewresolve.html=viewresolve
    formhandling.html=formHandlingOverview
    beancreation.html=beancreation
    wiringCollections.html=collectionController
    wiringSPEL.html = wireusingspEl
    autowire.html = AutowiringControl
    annotationautowire.html=AnnotationAutowiringControl
    filtercompautoscan.html=FilterAutoScanningControl
    abstractcontroller.html=AbstractController1
    parameterizableviewController.html=parameterizableviewController
    urlFileNameViewController.html=urlfilenameController
    commandAbstractController.html=ContollerAbstractCommand
    </value>
    </property>
    </bean>
    
    <bean id="processApplicationFormController" class="com.helpezee.controller.ProcessApplicationFormController">
    <property name="formView" value="fillForm" />
    <property name="successView" value="viewForm" />
    </bean>
<!-- End -->

<!-- ##################Internalization Start############################## -->

<!-- messageSource bean is an instance of class ReloadableResourceBundleMessageSource and we also have specified a property basename with value “classpath:messages”. ReloadableResourceBundleMessageSource class will load the property files containing message definition starting with prefix “messages-” -->
<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
    <property name="basename" value="classpath:messages" />
    <property name="defaultEncoding" value="UTF-8"/>
</bean>
<!-- we defined an interceptor bean localeChangeInterceptor which is an instance of class org.springframework.web.servlet.i18n.LocaleChangeInterceptor. Also note here that we have specified a property paramName with value lang. This interceptor is invoked whenever a request is made with parameter “lang” with different values. -->
<bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
    <property name="paramName" value="lang" />
    </bean>
<!-- Once the localeChangeInterceptor intercepts the change in the language, the changes are then stored in the cookies using class org.springframework.web.servlet.i18n.CookieLocaleResolver. -->
<bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
    <property name="defaultLocale" value="en"/>
</bean>
 
 
<!-- Internalization End -->

<!-- ################Theme changer################## -->

<!-- themeSource bean is an instance of class ResourceBundleThemeSource and we also have specified a property basenamePrefix with value “theme-”. ResourceBundleThemeSource class will load the property files containing theme definition starting with prefix “theme-” -->
<bean id="themeSource" class="org.springframework.ui.context.support.ResourceBundleThemeSource">
        <property name="basenamePrefix" value="theme-" />
</bean>
<!-- we defined an interceptor bean themeChangeInterceptor which is an instance of class org.springframework.web.servlet.theme.ThemeChangeInterceptor. Also note here that we have specified a property paramName with value theme. This interceptor is invoked whenever a request is made with parameter “theme” with different values. -->
<bean id="themeChangeInterceptor" class="org.springframework.web.servlet.theme.ThemeChangeInterceptor">
    <property name="paramName" value="theme" />
</bean>
<!-- Once the themeChangeInterceptor intercepts the change in the theme, the changes are then stored in the cookies using class org.springframework.web.servlet.theme.CookieThemeResolver. -->
<bean id="themeResolver" class="org.springframework.web.servlet.theme.CookieThemeResolver">
    <property name="defaultThemeName" value="default" />
</bean>
<!-- Theme changer ends -->

<!-- Hibernate Related -->

<!-- dataSource bean – This is the java datasource used to connect to contact manager database. We provide jdbc driver class, username, password etc in configuration. -->
<bean id="dataSource"
        class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
        p:driverClassName="${jdbc.driverClassName}"
        p:url="${jdbc.databaseurl}" p:username="${jdbc.username}"
        p:password="${jdbc.password}" />
 
<!-- sessionFactory bean – This is Hibernate configuration where we define different hibernate settings. hibernate.cfg.xml is set a config file which contains entity class mappings --> 
    <bean id="sessionFactory"
        class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation">
            <value>classpath:hibernate.cfg.xml</value>
        </property>
        <property name="configurationClass">
            <value>org.hibernate.cfg.AnnotationConfiguration</value>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${jdbc.dialect}</prop>
                <prop key="hibernate.show_sql">true</prop>
                 <prop key="hibernate.connection.SetBigStringTryClob">true</prop>
                <prop key="hibernate.jdbc.batch_size">0</prop>
            </props>
        </property>
    </bean>
<!-- transactionManager bean – We use hibernate transaction manager to manage the transactions of our contact manager application. -->
	<bean id="transactionManager"
        class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
<!-- Hibernate related ends -->


<!-- FileUpload Starts -->
<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- one of the properties available; the maximum file size in bytes -->
        <property name="maxUploadSize" value="10000000" />
    </bean>

<!-- FileUpload ends -->

<!--propertyConfigurer bean – This bean is used to load database property file jdbc.properties. The database connection details are stored in this file which is used in hibernate connection settings.  -->
<bean id="propertyConfigurer"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
        p:location="/WEB-INF/jdbc.properties" />
      
        
<bean id="handlerMapping" class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
    <property name="order" value="0" />
    <property name="interceptors">
    <list>
        <ref bean="localeChangeInterceptor" />
        <ref bean="themeChangeInterceptor" />
    </list>
    </property>
</bean>

 <mvc:interceptors>
  <bean id="interceptor" class="com.helpezee.interceptors.I18NInterceptor">
    <property name="paramName" value="locale" />
  </bean>
</mvc:interceptors>


<bean id="collectionController" class="com.helpezee.controller.CollectionController">
<property name="collectionsPojo"  ref="coll" />
</bean>

<bean id="coll" class="com.helpezee.beans.CollectionsClass">
<property name="enrolledCourses">
<list>
<value>satya</value>
<value>Suyog</value>
<value>Tabrez</value>
</list>
</property>
<property name="enrolledActivities">
<set>
<value>Tennis</value>  
<value>Music</value>  
<value>Photography</value> 
</set>
</property>
<property name="studentInfoMap">
<map>  
<entry key="name" value="John"/>  
<entry key="address" value="Orange County , CA"/>  
<entry key="phone" value="808-999-9999"/>  
</map>  
</property>
<property name="emailProps">
<props>  
<prop key="admin">admin@springaddon.com</prop>  
<prop key="support">support@springaddon.com</prop>  
</props>  
</property>
<property name="objectList">
<list>
<ref bean="book"/>
<ref bean="book1"/>
</list>
</property>
</bean>

<bean id="book" class="com.helpezee.beans.Book">
        <property name="author" value="Olivier Sips" />
        <property name="year" value="2012" />
</bean>
<bean id="book1" class="com.helpezee.beans.Book2">
        <property name="author" value="Sips" />
        <property name="year" value="2013" />
</bean>

<!--  Validators -->
<bean id="contactValidator" class="com.helpezee.validators.ContactValidator" />

<!-- Wiring using SPEL -->

<bean id="wireusingspEl" class="com.helpezee.controller.WiringSPELController">
<property name="products" ref="product" />
</bean>

<bean id="product" class="com.helpezee.beans.Product">
<property name="parts">
<list >
<value>#{part1.name}</value><!-- Passing the value of other bean names part1 -->
<value>#{part2.name}</value><!-- Passing the value of other bean names part2 -->
<value>#{part3.name}</value><!-- Passing the value of other bean names part3 -->
<value>#{5}</value> <!-- Passing the value of integer 5 -->
<value>This is good Concepts #{20}</value><!-- Passing the value of integer  and String also -->
<value>#{55.55}</value><!-- Passing the value of double -->
<value>#{'test message'}</value> <!-- Passing the value of text or characters or strings -->
<value>#{part1.testMethod()}</value><!-- Passing the return value of the  method : testMethod of Part1 bean as value of Product Bean-->
<value>#{part1.testMethod()?.toUpperCase()}</value> <!--  ?. is for Null check, Checking whether the  return value is null or not and then applying the String functions -->
<value>#{T(java.lang.Math).PI}</value><!-- Wiring with types -->
<value>#{T(java.lang.Math).random()}</value><!-- Static Method can also be invoked on the result of the T() operator -->
<value>#{22+22+1}</value><!-- Arthematic Addition -->
<value>#{2 * T(java.lang.Math).PI}</value><!-- Arthematic multiplication -->
<value>#{2 - T(java.lang.Math).PI}</value><!-- Arthematic substraction -->
<value>#{2 / T(java.lang.Math).PI}</value><!-- Arthematic Division -->
<value>#{2 % T(java.lang.Math).PI}</value><!-- Arthematic % -->
<value>#{2 * 2^2}</value><!-- Arthematic power of -->
<value>#{100 == 100}</value> <!-- comparing values where first value can be like counter.value getting value from some other bean  -->
<value>#{100 le 200}</value>
<value>#{part1.testMethod()!= null? true:false}</value><!-- ConditionalOperator -->
<value>#{part1.name matches '[a-zA-Z]'}</value><!-- We use Regular expression to validate the field -->
</list>
</property>
<property name="thirdStudentInList" value="#{studentList[2]}" /><!-- which returns the 3rd student in the list -->
<property name="failedStudents" value="#{studentList.?[marks lt 40]}" /><!-- .?[] for filtering knows as selection operator  which creates new collection ,a list of all students with marks less than 40 -->
<property name="studentNames" value="#{studentList.![name]}" /><!-- a projection of list of names of all students -->
</bean>
<bean id="part1" class="com.helpezee.beans.Part">
<property name="name" value="SATAYA 1"/>
</bean>
<bean id="part2" class="com.helpezee.beans.Part">
<property name="name" value="SSSSSSSS 2"/>
</bean>
<bean id="part3" class="com.helpezee.beans.Part">
<property name="name" value="EEEEE 3"/>
</bean>
<bean id="student1"
        class="com.helpezee.beans.Student">
        <property name="name" value="Zorro" />
        <property name="marks" value="70" />
    </bean>
 
    <bean id="student2"
        class="com.helpezee.beans.Student">
        <property name="name" value="Bach" />
        <property name="marks" value="50" />
    </bean>
 
    <bean id="student3"
        class="com.helpezee.beans.Student">
        <property name="name" value="Cindy" />
        <property name="marks" value="30" />
    </bean>
 
    <bean id="student4"
        class="com.helpezee.beans.Student">
        <property name="name" value="Alba" />
        <property name="marks" value="80" />
    </bean>
 
    <bean id="student5"
        class="com.helpezee.beans.Student">
        <property name="name" value="Danny" />
        <property name="marks" value="20" />
    </bean>
 
    <bean id="studentList" class="java.util.ArrayList">
        <constructor-arg>
            <list>
                <ref bean="student1" />
                <ref bean="student2" />
                <ref bean="student3" />
                <ref bean="student4" />
                <ref bean="student5" />
            </list>
        </constructor-arg>
    </bean>
   
   <!-- Spring Webservices using Apache Axis -->
   
<!--<bean id="springWSEndpoint" class="com.helpezee.ws.service.SpringWSEndPoint"></bean>-->
<bean id="springWS" class="com.helpezee.ws.service.SpringWS"></bean>
<!-- Axis Ends -->

<!-- Spring web service using apche CXF -->

	<import resource="classpath:META-INF/cxf/cxf.xml" />
	<import resource="classpath:META-INF/cxf/cxf-extension-soap.xml" />
	<import resource="classpath:META-INF/cxf/cxf-servlet.xml" />

	<jaxws:endpoint
	  id="bookShelfService"
	  implementor="com.helpezee.ws.apachecxf.BookService"
	  address="/bookshelfservice" />

    <bean id="bookserviceclass" class="com.helpezee.ws.apachecxf.BookService"/>

    <jaxrs:server id="bookservice" address="/bookservice">
        <jaxrs:serviceBeans>
        <ref bean="bookserviceclass" />
        </jaxrs:serviceBeans>
    </jaxrs:server>
 <!-- CXF Ends -->
</beans>
<!-- http://viralpatel.net/blogs/spring-3-mvc-internationalization-i18n-localization-tutorial-example/ 
http://www.dineshonjava.com/2012/12/spring-3-mvc-tiles-plugin-with-example.html#.Uh7oTH8yKfs
http://www.javacodegeeks.com/2013/04/spring-mvc-hibernate-maven-crud-operations-example.html
http://krams915.blogspot.com/2012/01/spring-mvc-31-implement-crud-with_4739.html
http://www.ntu.edu.sg/home/ehchua/programming/java/J5c_Collection.html
http://www.journaldev.com/1260/#collection-interface

-->